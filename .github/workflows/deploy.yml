name: Deploy Tiempo a HostGator

# Eventos que disparan el workflow
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]    # solo cuando el PR se cierra (merge/close)
  workflow_dispatch:

permissions:
  contents: read

# Evita despliegues simult√°neos, cancela el anterior si llega uno nuevo
concurrency:
  group: deploy-hostgator
  cancel-in-progress: true

jobs:
  # Job para PRs abiertos: verificaci√≥n ligera de build (sin pruebas)
  build_check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.merged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (cache npm)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Build (verificaci√≥n sin deploy)
        run: npm run build --if-present

  # Job principal de deployment
  deploy:
    runs-on: ubuntu-latest
    # Se ejecuta si:
    # 1) push a main, o
    # 2) PR que fue merged, o
    # 3) ejecuci√≥n manual (workflow_dispatch)
    if: >
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      github.event_name == 'workflow_dispatch'

    steps:
      # Paso 1: Descargar el c√≥digo del repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # Paso 2: Configurar Node con cache
      - name: Setup Node.js (cache npm)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      # Paso 3: Instalar dependencias
      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      # Paso 4: Construir el proyecto (Vite genera dist/)
      - name: Build project
        run: npm run build

      # Paso 5: Instalar cliente FTPS
      - name: Install lftp
        run: sudo apt-get update && sudo apt-get install -y lftp

      # Paso 6: Transferir archivos a HostGator (FTPS)
      - name: Deploy to HostGator via FTPS (mirror -R)
        shell: bash
        env:
          HOSTGATOR_FTP_SERVER: ${{ secrets.HOSTGATOR_FTP_SERVER }}
          HOSTGATOR_FTP_USERNAME: ${{ secrets.HOSTGATOR_FTP_USERNAME }}
          HOSTGATOR_FTP_PASSWORD: ${{ secrets.HOSTGATOR_FTP_PASSWORD }}
          HOSTGATOR_REMOTE_DIR: ${{ secrets.HOSTGATOR_REMOTE_DIR }}
        run: |
          # Validaci√≥n: asegurar que el build existe
          if [ ! -d "dist" ]; then
            echo "‚ùå La carpeta dist no existe. ¬øFall√≥ el build?"
            exit 1
          fi

          # Conexi√≥n FTPS con variables expandidas (EOF sin comillas)
          lftp -u "$HOSTGATOR_FTP_USERNAME","$HOSTGATOR_FTP_PASSWORD" "$HOSTGATOR_FTP_SERVER" << EOF
          set net:timeout 60
          set net:max-retries 2
          set net:reconnect-interval-base 5
          set ftp:ssl-allow true
          set ftp:ssl-force true
          set ftp:ssl-protect-data true
          set ftp:passive-mode true
          set cmd:fail-exit true

          # Entrar/crear el directorio remoto
          cd "$HOSTGATOR_REMOTE_DIR" || (mkdir -p "$HOSTGATOR_REMOTE_DIR" && cd "$HOSTGATOR_REMOTE_DIR")

          # Directorio local del build
          lcd dist

          # Subir solo archivos nuevos, sin permisos, con concurrencia moderada
          mirror -R \
            --only-newer \
            --no-perms \
            --parallel=2 \
            . .

          bye
          EOF

      # Paso 7: Notificaci√≥n de √©xito (visible en logs)
      - name: Deployment summary
        if: success()
        run: |
          echo "üöÄ Deploy a HostGator completado correctamente"
          echo "üìÖ Fecha: $(date)"
          echo "üîó Commit: ${{ github.sha }}"